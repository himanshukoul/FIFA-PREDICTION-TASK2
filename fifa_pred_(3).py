# -*- coding: utf-8 -*-
"""FIFA_Pred (3).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KX76of9Ly-3WVzOuFR3sDyRowMvHvFYU

<a href="https://colab.research.google.com/github/himanshukoul/FIFA-Prediction-TASK2-/blob/main/FIFA_Pred.ipynb" target="_parent"><img src="https://colab.research.google.com/assets/colab-badge.svg" alt="Open In Colab"/></a>

# New Section
"""

import pandas as pd
import numpy as np

dataset = pd.read_csv("international_matches.csv")
#from 2016
y = dataset.iloc[18318:, 16].values

#keeping away stats together
dataset.insert(24, "away_team_goalkeeper_score",dataset.pop("away_team_goalkeeper_score"))

same_country_as_home = []
for index, row in dataset.iterrows():
    if row['country'] == row['home_team']:
        same_country_as_home.append(0)
    elif row['country'] == row['away_team']:
        same_country_as_home.append(1)
    else:
      same_country_as_home.append(2)

dataset.insert(1, "same_country_as_home", same_country_as_home)
print(dataset.columns)
print(dataset.isna().sum())
#filling nan
for i in range(-1,-5,-1):
  homeTstats = dataset.columns[i-4]
  dataset[homeTstats] = dataset[homeTstats].fillna(dataset.groupby('home_team')[homeTstats].transform('mean'))
  awayTstats = dataset.columns[i]
  dataset[awayTstats] = dataset[awayTstats].fillna(dataset.groupby('away_team')[awayTstats].transform('mean'))
x = dataset.iloc[18318:,:].values
print(x[0])
print(y[0])
dataset = dataset.drop(dataset.columns[[0,2,3,4,5,8,9,10,11,13,14,16,17]],axis=1)
print(dataset.columns)
print(dataset.isna().sum())
x = dataset.iloc[18318:,:].values
print(x[0])
print(y[0])
#some stats are still nan due to no stats available by country
x_num = x[:,-8:].astype(float)
mask = ~np.isnan(x_num).any(axis=1)
print(mask)
x = x[mask]
y = y[mask]

print(np.isnan(x[:,-8:].astype(float)).any())
print(len(x))
print(x[0])
print(y[0])

"""#filling leftover nans
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='median')
imputer.fit(x[:, -8:])
x[:, -8:] = imputer.transform(x[:, -8:])"""

print(x[0])
print(len(np.unique(x[:,0])))
print(len(np.unique(x[:,3])))
print(len(np.unique(x[:,4])))

#!pip install category_encoders

from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
#import category_encoders as ce
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
print(y)
y = le.fit_transform(y)
print(y)

#ct =  ColumnTransformer(transformers=[('encoder', ce.BinaryEncoder(), [0,1,5]),('encoder2', ce.BinaryEncoder(), [4])], remainder='passthrough')
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(sparse_output=False), [0,3,4],)], remainder='passthrough')
x = np.array(ct.fit_transform(x))

print(x[0])

print(len(x[0]))

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)

print(x_train[0])

from sklearn.preprocessing import StandardScaler
#29+2+2 = 33 encoded
sc = StandardScaler()
sc.fit(x_train[:,33:])
x_train[:, 33:] = sc.transform(x_train[:, 33:])
x_test[:, 33:] = sc.transform(x_test[:, 33:])
print(x_train[0])

from sklearn.neighbors import KNeighborsClassifier
classifier = KNeighborsClassifier(n_neighbors = 20, metric = 'minkowski', p = 2)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)   #49%

from sklearn.svm import SVC
classifier = SVC(kernel = 'sigmoid', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)  #43.8%

from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)      # 47

from sklearn.ensemble import RandomForestClassifier
classifier = RandomForestClassifier(n_estimators = 30, criterion = 'log_loss', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)         # 49.12

from sklearn.svm import SVC
classifier = SVC(kernel = 'linear', random_state = 0)
classifier.fit(x_train, y_train)
y_pred = classifier.predict(x_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)          #59.6% (came best)

print("give a list with params for football match")
#[2 35 93 'Friendly' True 73.0 77.0 80.7 76.8 66.66170212765957 61.817857142857136 63.56 64.0]
#eg ['England','Spain',7,5,'FIFA World Cup qualification','England',False,83,84,88,82,86,86,81,80]
x_input = eval(input())
if(x_input[0]==x_input[5]):
  x_input[0] = 0
elif(x_input[1]==x_input[5]):
  x_input[0] = 1
else:
  x_input[0] = 2
x_input.pop(1)
x_input.pop(4)
print(x_input)
x_input = np.array([x_input], dtype=object)
print(x_input)
x_input = ct.transform(x_input)
x_input[:,33:] = sc.transform(x_input[:,33:])

y_pred = classifier.predict(x_input)
if(y_pred==0):
  print("draw")
elif(y_pred==1):
  print("1st team lose")
else:
  print("1st team win")

